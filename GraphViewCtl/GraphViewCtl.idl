// GraphViewCtl.idl : IDL source for GraphViewCtl
//

// This file will be processed by the MIDL tool to
// produce the type library (GraphViewCtl.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
import "mshtml.idl";

typedef [helpstring("Different layout options for the graph.")]
enum LayoutType {
	LayoutSpring = 0,
	LayoutCircle,
	LayoutNeato,
	LayoutTwoPi,
	LayoutDot,
	LayoutCirco,
	LayoutNone,
	LayoutFDR,
	LayoutBoostSpring,
	LayoutLee,
	LayoutSplines
} LayoutType;

typedef [helpstring("Image Positions, based on a compass with an additional central location.")]
enum ImagePosition {
	PositionNorthWest = 0,
	PositionNorth,
	PositionNorthEast,
	PositionWest,
	PositionCenter,
	PositionEast,
	PositionSouthWest,
	PositionSouth,
	PositionSouthEast
} ImagePosition;

typedef [helpstring("Different mouse modes.")]
enum MouseModes {
	MouseModeGrab = 0,
	MouseModeSelection,
	MouseModeDrawLinks
} MouseModes;

typedef [helpstring("DISPID_DSeisintGraphControlEvents")]
enum DISPID_DSeisintGraphControlEvents {
	DISPID_EdgeContextMenu = 1,
	DISPID_EdgeDoubleClick,
	DISPID_GraphContextMenu,
	DISPID_GraphDoubleClick,
	DISPID_VertexContextMenu,
	DISPID_VertexDoubleClick,
	DISPID_VertexSingleClick,
	DISPID_VertexMouseOver,
	DISPID_GraphMouseOver,
	DISPID_MetaDataLoaded,
	DISPID_LayoutFinished,
	DISPID_SubgraphMinClick
} DISPID_DSeisintGraphControlEvents;

typedef [helpstring("Different graph styles.")]
enum AppStyle {
	AppStyleRelavint = 0,
	AppStyleGrETL,
	AppStyleQBGraph
} AppStyle;

[
	object,
	uuid(429DC998-0CED-449C-A237-739810990F12),
	dual,
	nonextensible,
	helpstring("IUniqueID Interface"),
	pointer_default(unique)
]
interface IUniqueID : IDispatch
{
	[propget, helpstring("property Category")]
	HRESULT Category([out, retval] long* pVal);
	[propget, helpstring("property Identity")]
	HRESULT Identity([out, retval] BSTR* pVal);
};

[
	object,
	uuid(52590230-99FB-46F6-9BBD-58B643EA18F8),
	dual,
	nonextensible,
	helpstring("ICommon Interface"),
	pointer_default(unique)
]
interface ICommon : IUniqueID
{
	[propget, helpstring("Label")]
	HRESULT Label([out, retval] BSTR* pVal);
	[propput, helpstring("Label")]
	HRESULT Label([in] BSTR newVal);
	[helpstring("GetProperty")]
	HRESULT GetProperty([in] long key, [out, retval] BSTR* pVal);
	[helpstring("SetProperty")]
	HRESULT SetProperty([in] long key, [in] BSTR newVal);
	[propput, helpstring("Show or Hide")]
	HRESULT Visible([in] BOOL newVal);
	[propget, helpstring("Is the item visible")]
	HRESULT Visible([out, retval] BOOL* pVal);
	[helpstring("Let's you set an HTML element as an image to be rendered")]
	HRESULT SetImage(
		[in] IHTMLElementRender* element,
		[in, defaultvalue(PositionWest)] ImagePosition pos,
		[in, defaultvalue(0)] long width,
		[in, defaultvalue(0)] long height,
		[in, defaultvalue(0)] long marginX,
		[in, defaultvalue(0)] long marginY,
		[in, defaultvalue(0)] long overlay);
	[helpstring("Set Image Visibility")]
	HRESULT SetImageVisible([in] ImagePosition position, [in] BOOL newVal);
	[helpstring("Get Image Visibility")]
	HRESULT GetImageVisible([in] ImagePosition position, [out, retval] BOOL* pVal);
	//  Relavint Compatability
	[helpstring("Let's you set an HTML element as an image to be rendered")]
	HRESULT SetHtmlElement(
		[in] IHTMLElementRender* element,
		[in, defaultvalue(PositionWest)] ImagePosition pos,
		[in, defaultvalue(0)] long width,
		[in, defaultvalue(0)] long height,
		[in, defaultvalue(0)] long marginX,
		[in, defaultvalue(0)] long marginY,
		[in, defaultvalue(0)] long overlay);
};

[
	object,
	uuid(49055A2B-68B5-4C77-A366-7CBC49E01D2A),
	dual,
	nonextensible,
	helpstring("IVertex Interface"),
	pointer_default(unique)
]
interface IVertex : ICommon
{
	[helpstring("Set the visibility of any vertices linked to 'me'")]
	HRESULT SetLinkedVertexVisibilityByEdgeCat([in]long edgeCategory, [in]BOOL visible);
	[helpstring("Set the visibility of any vertices linked to 'me'")]
	HRESULT SetLinkedVertexVisibilityByVertexCat([in]long Category, [in]BOOL visible);
	[helpstring("Get the count for the number of visible vertices attached to 'me'")]
	HRESULT GetVisibleLinkedVerticesCountByEdgeCat([in]long edgeCategory, [out, retval]long *pVal);
	[helpstring("Get the count for the number of hidden vertices attached to 'me'")]
	HRESULT GetHiddenLinkedVerticesCountByEdgeCat([in]long edgeCategory, [out, retval]long *pVal);
	[helpstring("Get the count for the number of visible vertices attached to 'me'")]
	HRESULT GetVisibleLinkedVerticesCountByVertexCat([in]long Category, [out, retval]long *pVal);
	[helpstring("Get the count for the number of hidden vertices attached to 'me'")]
	HRESULT GetHiddenLinkedVerticesCountByVertexCat([in]long Category, [out, retval]long *pVal);
	[propget, helpstring("X location for this vertex")]
	HRESULT X([out, retval] long* pVal);
	[propget, helpstring("Y location for this vertex")]
	HRESULT Y([out, retval] long* pVal);
	[propget, helpstring("NormalBorderColor")]
	HRESULT NormalBorderColor([out, retval] ULONG* Color);
	[propput, helpstring("NormalBorderColor")]
	HRESULT NormalBorderColor([in] ULONG Color);
	[propget, helpstring("NormalBorderColor")]
	HRESULT NormalFillColor([out, retval] ULONG* Color);
	[propput, helpstring("NormalFillColor")]
	HRESULT NormalFillColor([in] ULONG Color);
	/* TODO:
	[helpstring("SelectedBorderColor")]
	[helpstring("SelectedFillColor")]
	[helpstring("OverFillColor")]
	[helpstring("OverBorderColor")]
	*/
};

[
	object,
	uuid(95F0BCB6-AA9F-4554-B9CB-589E66B2435D),
	dual,
	nonextensible,
	helpstring("IEdge Interface"),
	pointer_default(unique)
]
interface IEdge : ICommon
{
	// in theory Color could be in ICommon and then a vertex normal color could have this?
	[propget, helpstring("property Color")]
	HRESULT Color([out, retval] OLE_COLOR* pVal);
	[propput, helpstring("property Color")]
	HRESULT Color([in] OLE_COLOR newVal);
};


[
	object,
	uuid(EF1EA17B-C0E1-4e2e-A9B2-14B5120E82FF),
	dual,
	nonextensible,
	helpstring("ISubgraph Interface"),
	pointer_default(unique)
]
interface ISubgraph : ICommon
{
	[propput, helpstring("Minimize Subgraph")]
	HRESULT Minimize([in] BOOL newVal);
	[propget, helpstring("Is the item visible")]
	HRESULT Minimize([out, retval] BOOL* pVal);
};

[
	object,
	uuid(99CF7B85-C2CE-41E3-B6C4-E8E5C4C92B85),
	dual,
	nonextensible,
	helpstring("IHourglass Interface"),
	pointer_default(unique)
]
interface IHourglass : IDispatch {
};

[
	object,
	uuid(359453BC-9763-428D-9F7E-7D58B4B0A454),
	dual,
	nonextensible,
	helpstring("IMetaDataProperties Interface"),
	pointer_default(unique)
]
interface IMetaDataProperties : IDispatch
{
	[helpstring("method GetVertexXmlName")]
	HRESULT GetVertexXmlName(
		[in] long Category, 
		[in] BSTR* retVal);
	[helpstring("method GetVertexXmlAnbIconFile")]
	HRESULT GetVertexXmlAnbIconFile(
		[in] long Category, 
		[in] BSTR* retVal);
	[helpstring("method SetVertexCategoryLabel")]
	HRESULT SetVertexCategoryLabel(
		[in] long Category, 
		[in] BSTR CategoryLabel);
	[helpstring("method SetVertexXmlData")]
	HRESULT SetVertexXmlData(
		[in] long Category, 
		[in] BSTR name,
		[in] BSTR anbIconFile);
	[helpstring("method SetVertexColors")]
	HRESULT SetVertexColors(
		[in] long Category, 
		[in] ULONG NormalFill, 
		[in] ULONG NormalBorder, 
		[in] ULONG SelectedFill, 
		[in] ULONG SelectedBorder, 
		[in] ULONG OverFill, 
		[in] ULONG OverBorder);
	[helpstring("method SetVertexNormalBorderColor")]
	HRESULT SetVertexNormalBorderColor(
		[in] long Category, 
		[in] ULONG Color);
	[helpstring("method SetVertexNormalFillColor")]
	HRESULT SetVertexNormalFillColor(
		[in] long Category, 
		[in] ULONG Color);
	[helpstring("method SetVertexSelectedBorderColor")]
	HRESULT SetVertexSelectedBorderColor(
		[in] long Category, 
		[in] ULONG Color);
	[helpstring("method SetVertexSelectedFillColor")]
	HRESULT SetVertexSelectedFillColor(
		[in] long Category, 
		[in] ULONG Color);
	[helpstring("method SetVertexOverFillColor")]
	HRESULT SetVertexOverFillColor(
		[in] long Category, 
		[in] ULONG Color);
	[helpstring("method SetVertexOverBorderColor")]
	HRESULT SetVertexOverBorderColor(
		[in] long Category, 
		[in] ULONG Color);
	[helpstring("method SetVerticesVisibleByEdgeCount")]
	HRESULT SetVerticesVisibleByEdgeCount(
		[in] long edgeCount, 
		[in] BOOL visible);
	[helpstring("Let's you set an HTML elements as image overlays to be rendered for a vertex")]
	HRESULT SetVertexImage(
		[in] long Category, 
		[in] IHTMLElementRender* element,
		[in, defaultvalue(PositionWest)] ImagePosition pos,
		[in, defaultvalue(0)] long width,
		[in, defaultvalue(0)] long height,
		[in, defaultvalue(0)] long marginX,
		[in, defaultvalue(0)] long marginY,
		[in, defaultvalue(0)] long overlay);
	[helpstring("method SetEdgeColors")]
	HRESULT SetEdgeColors(
		[in] long Category, 
		[in] ULONG Normal, 
		[in] ULONG ShortestPath);
	[hidden, helpstring("method SetEdgeCategoryLabel")]
	HRESULT SetEdgeCategoryLabel(
		[in] long Category, 
		[in] BSTR CategoryLabel);
	[helpstring("method SetEdgeNormalColor")]
	HRESULT SetEdgeNormalColor(
		[in] long Category, 
		[in] ULONG Color);
	[helpstring("method SetEdgeNormalColor")]
	HRESULT SetEdgeShortestPathColor(
		[in] long Category, 
		[in] ULONG Color);
	[helpstring("method SetEdgeWidth")]
	HRESULT SetEdgeWidth(
		[in] long Category,
		[in] short Width);
	[helpstring("method SetEdgeXmlCategoryCode")]
	HRESULT SetEdgeXmlCategoryCode(
		[in] long Category,
		[in] BSTR CategoryCode);
	[helpstring("Let's you set an HTML elements as image overlays to be rendered for an edge")]
	HRESULT SetEdgeImage(
		[in] long Category, 
		[in] IHTMLElementRender* element,
		[in, defaultvalue(PositionWest)] ImagePosition pos,
		[in, defaultvalue(0)] long width,
		[in, defaultvalue(0)] long height,
		[in, defaultvalue(0)] long marginX,
		[in, defaultvalue(0)] long marginY,
		[in, defaultvalue(0)] long overlay);
    //  Backward Compatability
	HRESULT SetVertexIconHtmlElement(
		[in] long Category, 
		[in] IHTMLElementRender* element);
};

[
	object,
	uuid(F4EA0FF6-4005-4cf6-8671-7F5CDDFFD0C5),
	dual,                                             
	pointer_default(unique),
	nonextensible                                     
]
interface IVertices : IDispatch
{
	[propget, id(1), helpstring("special Count accessor")] 
	HRESULT Count([out, retval] long* pVal);

	[propget, id(DISPID_NEWENUM), 
		helpstring("hidden _NewEnum for VB/Automation"), restricted] 
	HRESULT _NewEnum([out, retval] IUnknown** pVal);

	[propget, id(DISPID_VALUE), helpstring("special Item get accessor")] 
	HRESULT Item([in] long lIndex, 
		[out, retval] IVertex** pVal);
};

[
	object,
	uuid(AEF18F28-D5BA-42EB-87A5-7A4EC7AC8032),
	dual,
	nonextensible,
	helpstring("IGraphViewControl Interface"),
	pointer_default(unique)
]
interface IGraphViewControl : IMetaDataProperties
{
	[helpstring("method AddVertexSimple")]
	HRESULT AddVertexSimple(
		[in] long Category, 
		[in] BSTR Identity, 
		[in, defaultvalue("")] BSTR Label,
		[out, retval] IVertex** Vertex);
	[helpstring("method AddVertex")]
	HRESULT AddVertex(
		[in] long Category, 
		[in] BSTR Identity, 
		[in, defaultvalue("")] BSTR Label,
		[in, defaultvalue(0)] long X,
		[in, defaultvalue(0)] long Y,
		[out, retval] IVertex** Vertex);
	[helpstring("method AddEdge")]
	HRESULT AddEdge(
		[in] long Category, 
		[in] IVertex* From, 
		[in] IVertex* To, 
		[in, defaultvalue("")] BSTR Label, 
		[out, retval] IEdge** Edge);
	[helpstring("method Clear")]
	HRESULT Clear();
	[helpstring("method GetVertex")]
	HRESULT GetVertex(
		[in] long Category, 
		[in] BSTR Identity, 
		[out, retval] IVertex** Vertex);
	[helpstring("method GetEdge")]
	HRESULT GetEdge(
		[in] long Category, 
		[in] IVertex* From, 
		[in] IVertex* To, 
		[out, retval] IEdge** Edge);
	[helpstring("method GenerateRandomData")]
	HRESULT GenerateRandomData();
	[helpstring("HideCategory")]
	HRESULT HideCategory([in] long Category);
	[helpstring("method Recenter")]
	HRESULT Recenter();
	[helpstring("method Redraw")]
	HRESULT Redraw();
	[propget, helpstring("property Rotation")]
	HRESULT Rotation([out, retval] long* pVal);
	[propput, helpstring("property Rotation")]
	HRESULT Rotation([in] long newVal);
	[helpstring("SetVisibleCategory")]
	HRESULT SetVertexVisible([in] long Category, [in] BOOL newVal);
	[helpstring("Set Vertex Image Visibility By Category")]
	HRESULT SetVertexImageVisible([in] long Category, [in] ImagePosition position, [in] BOOL newVal);
	[helpstring("SetVisibleByEdgeCategory")]
	HRESULT SetEdgeVisible([in] long Category, [in] BOOL newVal);
	[helpstring("Set Edge Image Visibility By Category")]
	HRESULT SetEdgeImageVisible([in] long Category, [in] ImagePosition position, [in] BOOL newVal);
	[helpstring("ShowCategory")]
	HRESULT ShowCategory([in] long Category);
	[helpstring("ShowMenu")]
	HRESULT ShowMenu(
		[in] long x, [in] long y,
		[in] IDispatch* jsarrMenuStringNames,
		[out, retval] long* pVal);
	[helpstring("Show Hourglass (requires you to keep a reference to returned object for hourglass lifetime)")]
	HRESULT ShowHourglass([out, retval]IHourglass** pVal);
	[propget, helpstring("property Spacing")]
	HRESULT Spacing([out, retval] long* pVal);
	[propput, helpstring("property Spacing")]
	HRESULT Spacing([in] long newVal);
	[helpstring("method StopLayout")]
	HRESULT StopLayout();
	[propget, helpstring("property Layout")]
	HRESULT Layout([out, retval] LayoutType* pVal);
	[propput, helpstring("property Layout")]
	HRESULT Layout([in] LayoutType newVal);
	[propget, helpstring("property MouseMode")]
	HRESULT MouseMode([out, retval] MouseModes* pVal);
	[propput, helpstring("property MouseMode")]
	HRESULT MouseMode([in] MouseModes newVal);
	[propget, helpstring("property Zoom")]
	HRESULT Zoom([out, retval] long* pVal);
	[propput, helpstring("property Zoom")]
	HRESULT Zoom([in] long newVal);
	[helpstring("GetSelectedVertices")]
	HRESULT GetSelectedVertices([out, retval] IVertices** collection);
	[helpstring("method SetSelectedVertex")]
	HRESULT SetSelectedVertex([in] long Category, [in] BSTR Identity, [in] BOOL bSelected, [in, defaultvalue(FALSE)] BOOL bAppend);
	[helpstring("EnsureVisible - Restores subgraphs so that item is visible.")]
	HRESULT EnsureVisible([in] LONG Category, [in] BSTR Identity);
	[helpstring("ScaleToFit - Scale the entire map to fit on the device context (e.g. screen)")]
	HRESULT ScaleToFit([out, retval] long* pVal);
	[helpstring("ScaleToFitSelected - Scale the selected map to fit on the device context (e.g. screen)")]
	HRESULT ScaleToFitSelected([out, retval] long* pVal);
	[helpstring("GetRenderExtent")]
	HRESULT GetRenderExtent([in] OLE_HANDLE hDC, [out] double * pX, [out] double * pY, [out] double * pWidth, [out] double * pHeight);
	[helpstring("Recenter on the currently selected Vertex")]
	HRESULT RecenterSelected();
	[helpstring("Recenter on a Vertex")]
	HRESULT RecenterOnVertex(long category, BSTR identity);
	[helpstring("Remove a Vertex")]
	HRESULT RemoveVertex(long category, BSTR identity);
	[helpstring("Render to a DC at a given location (requires GetRenderExtent)")]
	HRESULT RenderTo(OLE_HANDLE hDC, [in] double X, [in] double Y, [in] double PageX, [in] double PageY, [in] double PageWidth, [in] double PageHeight);
	[helpstring("Render the current (entire) map to the clipboard")]
	HRESULT RenderToClipboard();
	[helpstring("Save the current (entire) map to disk")]
	HRESULT Save(BSTR filename);
	[helpstring("Save the current (entire) map to disk")]
	HRESULT SaveAs();
	[helpstring("method LoadXml")]
	HRESULT LoadXml([in] BSTR xml);
	[helpstring("method SaveXml")]
	HRESULT SaveXml([in, defaultvalue(FALSE)]BOOL version2, [out, retval] BSTR* retVal);
	[helpstring("method SaveXmlAs (with file dialog)")]
	HRESULT SaveXmlAs();
	[helpstring("method GetMeta")]
	HRESULT GetMeta([in] BSTR url);
	[helpstring("method GetData")]
	HRESULT GetData([in] BSTR url, [in] LONG Category, [in] BSTR ID);
	[helpstring("Hides any disconnected nodes (not connected to any edges)")]
	HRESULT HideDisconnected();
	[helpstring("Hides any singleton nodes (nodes connected to a single edge only)")]
	HRESULT HideSingletons();
	[helpstring("method SetSplinesMode")]
	HRESULT SetSplinesMode([in] LONG splines);
	[helpstring("LoadXmlFile using file dialog")]
	HRESULT LoadXmlFile();
	[helpstring("Show or Hide Overview")]
	HRESULT ShowOverview([in] LONG show);
	[helpstring("Set Overview Opacity")]
	HRESULT SetOverviewOpacity([in] LONG opacity);
	[helpstring("Show or Hide Edge Labels")]
	HRESULT ShowEdgeLabels([in] LONG show);
	[helpstring("Overview Style")] 
	HRESULT EmulateDecoration([in] BYTE inplace);
	[helpstring("Graph Style")] 
	HRESULT SetGraphStyle([in] AppStyle style);
	[helpstring("Load XGMML or path to XGMML file.")]
	HRESULT LoadXgmml([in] BSTR xgmml, [in, defaultvalue(0)] LONG state, [in, defaultvalue(TRUE)]BOOL minimizeIfLarge);
	[helpstring("Update existing graph fromXGMML.")]
	HRESULT MergeXgmml([in] BSTR xgmml, [in] LONG state);
	[helpstring("FileDialog Open")]
	HRESULT SelectFile([in] BSTR current, [out, retval] BSTR* retVal);	
	HRESULT FindVertices([in] BSTR searchstring, [in, defaultvalue(TRUE)]BOOL searchLabel, [in, defaultvalue(FALSE)]BOOL searchProperties, [out, retval] IVertices** collection);
	HRESULT SetApplicationZoomMode([in] LONG mode);
	[helpstring("Launches Find Item by ID Dialog")]
	HRESULT FindGraphItemByID();
	[helpstring("Get the ActiveX version")]
	HRESULT GetVersion([out, retval] BSTR* pVal);
};

[
	uuid(B7729748-C0E5-45B5-A29D-B89AD5C9FE81),
	version(1.0),
	helpstring("HPCC Systems GraphView Control Library 1.0")
]
library GraphViewControlLib
{
	importlib("stdole2.tlb");

	[
		uuid(5E48FEE6-3244-44EF-B6C0-9415671E2A13),
		helpstring("DSeisintGraphControlEvents Interface")
	]
	dispinterface DSeisintGraphControlEvents
	{
properties:
methods:
		[id(DISPID_GraphContextMenu), helpstring("GraphContextMenu Event")]
		HRESULT OnGraphContextMenu(long x, long y);
		[id(DISPID_GraphDoubleClick), helpstring("GraphDoubleClick Event")]
		HRESULT OnGraphDoubleClick(long x, long y);
		[id(DISPID_GraphMouseOver), helpstring("GraphMouseOver Event")]
		HRESULT OnGraphMouseOver(long x, long y);

		[id(DISPID_MetaDataLoaded), helpstring("MetaDataLoaded Event")]
		HRESULT OnMetaDataLoaded();
		[id(DISPID_LayoutFinished), helpstring("LayoutFinished Event")]
		HRESULT OnLayoutFinished();

		[id(DISPID_EdgeContextMenu), helpstring("EdgeContextMenu Event")]
		HRESULT OnEdgeContextMenu(long x, long y, IEdge* Edge);
		[id(DISPID_EdgeDoubleClick), helpstring("EdgeDoubleClick Event")]
		HRESULT OnEdgeDoubleClick(long x, long y, IEdge* Edge);

		[id(DISPID_VertexContextMenu), helpstring("VertexContextMenu Event")]
		HRESULT OnVertexContextMenu(long x, long y, IVertex* Vertex);
		[id(DISPID_VertexDoubleClick), helpstring("VertexDoubleClick Event")]
		HRESULT OnVertexDoubleClick(long x, long y, IVertex* Vertex);
		[id(DISPID_VertexSingleClick), helpstring("VertexSingleClick Event")]
		HRESULT OnVertexSingleClick(long x, long y, IVertex* Vertex);
		[id(DISPID_VertexMouseOver), helpstring("VertexMouseOver Event")]
		HRESULT OnVertexMouseOver(long x, long y, IVertex* Vertex);

		[id(DISPID_SubgraphMinClick), helpstring("method SubgraphMinClick")] 
		void SubgraphMinClick([in] ISubgraph * Subgraph);
	};

	[
		uuid(F1EA17CB-F7BD-4108-A742-1BC7774383FF),
		helpstring("GraphViewControl")
	]
	coclass GraphViewControl
	{
		[default] interface IGraphViewControl;
		[default, source] dispinterface DSeisintGraphControlEvents;
	};

	// CANNOT CREATE DIRECTLY (only via Add/Get Vertex and Add/Get Edge):
	//[
	//	uuid(D43C718F-BB0D-491B-90A5-F6D1E0D9818B),
	//	helpstring("Vertex")
	//]
	//coclass Vertex
	//{
	//	[default] interface IVertex;
	//};

	//[
	//	uuid(5B247E96-339C-430A-874B-F9B946FED0E2),
	//	helpstring("Edge")
	//]
	//coclass Edge
	//{
	//	[default] interface IEdge;
	//};

	[
		uuid(B067BDCD-B1A6-4790-82B1-D843B780BF15),
		helpstring("Hourglass Object")
	]
	coclass Hourglass
	{
		[default] interface IHourglass;
	};

	//[
	//	uuid(6EB469FE-FF63-486f-8D9F-AAD52AFFDCB5),
	//	helpstring("Vertex collection")
	//]
	//coclass Vertices
	//{
	//	[default] interface IVertices;
	//};

};

