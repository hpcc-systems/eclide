/* soapWsDfuServiceSoapProxy.cpp
   Generated by gSOAP 2.7.15 from Services.h
   Copyright(C) 2000-2009, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapWsDfuServiceSoapProxy.h"

WsDfuServiceSoapProxy::WsDfuServiceSoapProxy()
{	WsDfuServiceSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

WsDfuServiceSoapProxy::WsDfuServiceSoapProxy(const struct soap &_soap) :soap(_soap)
{ }

WsDfuServiceSoapProxy::WsDfuServiceSoapProxy(soap_mode iomode)
{	WsDfuServiceSoapProxy_init(iomode, iomode);
}

WsDfuServiceSoapProxy::WsDfuServiceSoapProxy(soap_mode imode, soap_mode omode)
{	WsDfuServiceSoapProxy_init(imode, omode);
}

void WsDfuServiceSoapProxy::WsDfuServiceSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "urn:hpccsystems:ws:ws_account", NULL, NULL},
	{"ns2", "urn:hpccsystems:ws:wsattributes", NULL, NULL},
	{"ns3", "urn:hpccsystems:ws:wsdfu", NULL, NULL},
	{"ns4", "urn:hpccsystems:ws:wssmc", NULL, NULL},
	{"ns5", "urn:hpccsystems:ws:wstopology", NULL, NULL},
	{"ns6", "urn:hpccsystems:ws:wsworkunits", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
}

WsDfuServiceSoapProxy::~WsDfuServiceSoapProxy()
{ }

void WsDfuServiceSoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void WsDfuServiceSoapProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *WsDfuServiceSoapProxy::soap_fault()
{	return this->fault;
}

const char *WsDfuServiceSoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *WsDfuServiceSoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int WsDfuServiceSoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

void WsDfuServiceSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void WsDfuServiceSoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}

char *WsDfuServiceSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int WsDfuServiceSoapProxy::Add(_ns3__AddRequest *ns3__AddRequest, _ns3__AddResponse *ns3__AddResponse)
{	struct soap *soap = this;
	struct __ns3__Add soap_tmp___ns3__Add;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/Add?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__Add.ns3__AddRequest = ns3__AddRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__Add(soap, &soap_tmp___ns3__Add);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__Add(soap, &soap_tmp___ns3__Add, "-ns3:Add", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__Add(soap, &soap_tmp___ns3__Add, "-ns3:Add", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__AddResponse)
		return soap_closesock(soap);
	ns3__AddResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__AddResponse->soap_get(soap, "ns3:AddResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::AddRemote(_ns3__AddRemoteRequest *ns3__AddRemoteRequest, _ns3__AddRemoteResponse *ns3__AddRemoteResponse)
{	struct soap *soap = this;
	struct __ns3__AddRemote soap_tmp___ns3__AddRemote;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/AddRemote?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__AddRemote.ns3__AddRemoteRequest = ns3__AddRemoteRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__AddRemote(soap, &soap_tmp___ns3__AddRemote);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__AddRemote(soap, &soap_tmp___ns3__AddRemote, "-ns3:AddRemote", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__AddRemote(soap, &soap_tmp___ns3__AddRemote, "-ns3:AddRemote", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__AddRemoteResponse)
		return soap_closesock(soap);
	ns3__AddRemoteResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__AddRemoteResponse->soap_get(soap, "ns3:AddRemoteResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::AddtoSuperfile(_ns3__AddtoSuperfileRequest *ns3__AddtoSuperfileRequest, _ns3__AddtoSuperfileResponse *ns3__AddtoSuperfileResponse)
{	struct soap *soap = this;
	struct __ns3__AddtoSuperfile soap_tmp___ns3__AddtoSuperfile;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/AddtoSuperfile?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__AddtoSuperfile.ns3__AddtoSuperfileRequest = ns3__AddtoSuperfileRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__AddtoSuperfile(soap, &soap_tmp___ns3__AddtoSuperfile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__AddtoSuperfile(soap, &soap_tmp___ns3__AddtoSuperfile, "-ns3:AddtoSuperfile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__AddtoSuperfile(soap, &soap_tmp___ns3__AddtoSuperfile, "-ns3:AddtoSuperfile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__AddtoSuperfileResponse)
		return soap_closesock(soap);
	ns3__AddtoSuperfileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__AddtoSuperfileResponse->soap_get(soap, "ns3:AddtoSuperfileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::DFUArrayAction(_ns3__DFUArrayActionRequest *ns3__DFUArrayActionRequest, _ns3__DFUArrayActionResponse *ns3__DFUArrayActionResponse)
{	struct soap *soap = this;
	struct __ns3__DFUArrayAction soap_tmp___ns3__DFUArrayAction;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/DFUArrayAction?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__DFUArrayAction.ns3__DFUArrayActionRequest = ns3__DFUArrayActionRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__DFUArrayAction(soap, &soap_tmp___ns3__DFUArrayAction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DFUArrayAction(soap, &soap_tmp___ns3__DFUArrayAction, "-ns3:DFUArrayAction", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DFUArrayAction(soap, &soap_tmp___ns3__DFUArrayAction, "-ns3:DFUArrayAction", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DFUArrayActionResponse)
		return soap_closesock(soap);
	ns3__DFUArrayActionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DFUArrayActionResponse->soap_get(soap, "ns3:DFUArrayActionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::DFUBrowseData(_ns3__DFUBrowseDataRequest *ns3__DFUBrowseDataRequest, _ns3__DFUBrowseDataResponse *ns3__DFUBrowseDataResponse)
{	struct soap *soap = this;
	struct __ns3__DFUBrowseData soap_tmp___ns3__DFUBrowseData;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/DFUBrowseData?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__DFUBrowseData.ns3__DFUBrowseDataRequest = ns3__DFUBrowseDataRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__DFUBrowseData(soap, &soap_tmp___ns3__DFUBrowseData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DFUBrowseData(soap, &soap_tmp___ns3__DFUBrowseData, "-ns3:DFUBrowseData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DFUBrowseData(soap, &soap_tmp___ns3__DFUBrowseData, "-ns3:DFUBrowseData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DFUBrowseDataResponse)
		return soap_closesock(soap);
	ns3__DFUBrowseDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DFUBrowseDataResponse->soap_get(soap, "ns3:DFUBrowseDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::DFUDefFile(_ns3__DFUDefFileRequest *ns3__DFUDefFileRequest, _ns3__DFUDefFileResponse *ns3__DFUDefFileResponse)
{	struct soap *soap = this;
	struct __ns3__DFUDefFile soap_tmp___ns3__DFUDefFile;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/DFUDefFile?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__DFUDefFile.ns3__DFUDefFileRequest = ns3__DFUDefFileRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__DFUDefFile(soap, &soap_tmp___ns3__DFUDefFile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DFUDefFile(soap, &soap_tmp___ns3__DFUDefFile, "-ns3:DFUDefFile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DFUDefFile(soap, &soap_tmp___ns3__DFUDefFile, "-ns3:DFUDefFile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DFUDefFileResponse)
		return soap_closesock(soap);
	ns3__DFUDefFileResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DFUDefFileResponse->soap_get(soap, "ns3:DFUDefFileResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::DFUFileView(_ns3__DFUFileViewRequest *ns3__DFUFileViewRequest, _ns3__DFUFileViewResponse *ns3__DFUFileViewResponse)
{	struct soap *soap = this;
	struct __ns3__DFUFileView soap_tmp___ns3__DFUFileView;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/DFUFileView?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__DFUFileView.ns3__DFUFileViewRequest = ns3__DFUFileViewRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__DFUFileView(soap, &soap_tmp___ns3__DFUFileView);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DFUFileView(soap, &soap_tmp___ns3__DFUFileView, "-ns3:DFUFileView", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DFUFileView(soap, &soap_tmp___ns3__DFUFileView, "-ns3:DFUFileView", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DFUFileViewResponse)
		return soap_closesock(soap);
	ns3__DFUFileViewResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DFUFileViewResponse->soap_get(soap, "ns3:DFUFileViewResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::DFUGetDataColumns(_ns3__DFUGetDataColumnsRequest *ns3__DFUGetDataColumnsRequest, _ns3__DFUGetDataColumnsResponse *ns3__DFUGetDataColumnsResponse)
{	struct soap *soap = this;
	struct __ns3__DFUGetDataColumns soap_tmp___ns3__DFUGetDataColumns;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/DFUGetDataColumns?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__DFUGetDataColumns.ns3__DFUGetDataColumnsRequest = ns3__DFUGetDataColumnsRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__DFUGetDataColumns(soap, &soap_tmp___ns3__DFUGetDataColumns);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DFUGetDataColumns(soap, &soap_tmp___ns3__DFUGetDataColumns, "-ns3:DFUGetDataColumns", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DFUGetDataColumns(soap, &soap_tmp___ns3__DFUGetDataColumns, "-ns3:DFUGetDataColumns", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DFUGetDataColumnsResponse)
		return soap_closesock(soap);
	ns3__DFUGetDataColumnsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DFUGetDataColumnsResponse->soap_get(soap, "ns3:DFUGetDataColumnsResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::DFUGetFileMetaData(_ns3__DFUGetFileMetaDataRequest *ns3__DFUGetFileMetaDataRequest, _ns3__DFUGetFileMetaDataResponse *ns3__DFUGetFileMetaDataResponse)
{	struct soap *soap = this;
	struct __ns3__DFUGetFileMetaData soap_tmp___ns3__DFUGetFileMetaData;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/DFUGetFileMetaData?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__DFUGetFileMetaData.ns3__DFUGetFileMetaDataRequest = ns3__DFUGetFileMetaDataRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__DFUGetFileMetaData(soap, &soap_tmp___ns3__DFUGetFileMetaData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DFUGetFileMetaData(soap, &soap_tmp___ns3__DFUGetFileMetaData, "-ns3:DFUGetFileMetaData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DFUGetFileMetaData(soap, &soap_tmp___ns3__DFUGetFileMetaData, "-ns3:DFUGetFileMetaData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DFUGetFileMetaDataResponse)
		return soap_closesock(soap);
	ns3__DFUGetFileMetaDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DFUGetFileMetaDataResponse->soap_get(soap, "ns3:DFUGetFileMetaDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::DFUInfo(_ns3__DFUInfoRequest *ns3__DFUInfoRequest, _ns3__DFUInfoResponse *ns3__DFUInfoResponse)
{	struct soap *soap = this;
	struct __ns3__DFUInfo soap_tmp___ns3__DFUInfo;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/DFUInfo?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__DFUInfo.ns3__DFUInfoRequest = ns3__DFUInfoRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__DFUInfo(soap, &soap_tmp___ns3__DFUInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DFUInfo(soap, &soap_tmp___ns3__DFUInfo, "-ns3:DFUInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DFUInfo(soap, &soap_tmp___ns3__DFUInfo, "-ns3:DFUInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DFUInfoResponse)
		return soap_closesock(soap);
	ns3__DFUInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DFUInfoResponse->soap_get(soap, "ns3:DFUInfoResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::DFUQuery(_ns3__DFUQueryRequest *ns3__DFUQueryRequest, _ns3__DFUQueryResponse *ns3__DFUQueryResponse)
{	struct soap *soap = this;
	struct __ns3__DFUQuery soap_tmp___ns3__DFUQuery;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/DFUQuery?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__DFUQuery.ns3__DFUQueryRequest = ns3__DFUQueryRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__DFUQuery(soap, &soap_tmp___ns3__DFUQuery);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DFUQuery(soap, &soap_tmp___ns3__DFUQuery, "-ns3:DFUQuery", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DFUQuery(soap, &soap_tmp___ns3__DFUQuery, "-ns3:DFUQuery", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DFUQueryResponse)
		return soap_closesock(soap);
	ns3__DFUQueryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DFUQueryResponse->soap_get(soap, "ns3:DFUQueryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::DFUSearch(_ns3__DFUSearchRequest *ns3__DFUSearchRequest, _ns3__DFUSearchResponse *ns3__DFUSearchResponse)
{	struct soap *soap = this;
	struct __ns3__DFUSearch soap_tmp___ns3__DFUSearch;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/DFUSearch?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__DFUSearch.ns3__DFUSearchRequest = ns3__DFUSearchRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__DFUSearch(soap, &soap_tmp___ns3__DFUSearch);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DFUSearch(soap, &soap_tmp___ns3__DFUSearch, "-ns3:DFUSearch", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DFUSearch(soap, &soap_tmp___ns3__DFUSearch, "-ns3:DFUSearch", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DFUSearchResponse)
		return soap_closesock(soap);
	ns3__DFUSearchResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DFUSearchResponse->soap_get(soap, "ns3:DFUSearchResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::DFUSearchData(_ns3__DFUSearchDataRequest *ns3__DFUSearchDataRequest, _ns3__DFUSearchDataResponse *ns3__DFUSearchDataResponse)
{	struct soap *soap = this;
	struct __ns3__DFUSearchData soap_tmp___ns3__DFUSearchData;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/DFUSearchData?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__DFUSearchData.ns3__DFUSearchDataRequest = ns3__DFUSearchDataRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__DFUSearchData(soap, &soap_tmp___ns3__DFUSearchData);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DFUSearchData(soap, &soap_tmp___ns3__DFUSearchData, "-ns3:DFUSearchData", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DFUSearchData(soap, &soap_tmp___ns3__DFUSearchData, "-ns3:DFUSearchData", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DFUSearchDataResponse)
		return soap_closesock(soap);
	ns3__DFUSearchDataResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DFUSearchDataResponse->soap_get(soap, "ns3:DFUSearchDataResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::DFUSpace(_ns3__DFUSpaceRequest *ns3__DFUSpaceRequest, _ns3__DFUSpaceResponse *ns3__DFUSpaceResponse)
{	struct soap *soap = this;
	struct __ns3__DFUSpace soap_tmp___ns3__DFUSpace;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/DFUSpace?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__DFUSpace.ns3__DFUSpaceRequest = ns3__DFUSpaceRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__DFUSpace(soap, &soap_tmp___ns3__DFUSpace);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__DFUSpace(soap, &soap_tmp___ns3__DFUSpace, "-ns3:DFUSpace", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__DFUSpace(soap, &soap_tmp___ns3__DFUSpace, "-ns3:DFUSpace", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DFUSpaceResponse)
		return soap_closesock(soap);
	ns3__DFUSpaceResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DFUSpaceResponse->soap_get(soap, "ns3:DFUSpaceResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::EraseHistory(_ns3__EraseHistoryRequest *ns3__EraseHistoryRequest, _ns3__EraseHistoryResponse *ns3__EraseHistoryResponse)
{	struct soap *soap = this;
	struct __ns3__EraseHistory soap_tmp___ns3__EraseHistory;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/EraseHistory?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__EraseHistory.ns3__EraseHistoryRequest = ns3__EraseHistoryRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__EraseHistory(soap, &soap_tmp___ns3__EraseHistory);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__EraseHistory(soap, &soap_tmp___ns3__EraseHistory, "-ns3:EraseHistory", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__EraseHistory(soap, &soap_tmp___ns3__EraseHistory, "-ns3:EraseHistory", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__EraseHistoryResponse)
		return soap_closesock(soap);
	ns3__EraseHistoryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__EraseHistoryResponse->soap_get(soap, "ns3:EraseHistoryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::ListHistory(_ns3__ListHistoryRequest *ns3__ListHistoryRequest, _ns3__ListHistoryResponse *ns3__ListHistoryResponse)
{	struct soap *soap = this;
	struct __ns3__ListHistory soap_tmp___ns3__ListHistory;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/ListHistory?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__ListHistory.ns3__ListHistoryRequest = ns3__ListHistoryRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__ListHistory(soap, &soap_tmp___ns3__ListHistory);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__ListHistory(soap, &soap_tmp___ns3__ListHistory, "-ns3:ListHistory", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__ListHistory(soap, &soap_tmp___ns3__ListHistory, "-ns3:ListHistory", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__ListHistoryResponse)
		return soap_closesock(soap);
	ns3__ListHistoryResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__ListHistoryResponse->soap_get(soap, "ns3:ListHistoryResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::Savexml(_ns3__SavexmlRequest *ns3__SavexmlRequest, _ns3__SavexmlResponse *ns3__SavexmlResponse)
{	struct soap *soap = this;
	struct __ns3__Savexml soap_tmp___ns3__Savexml;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/Savexml?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__Savexml.ns3__SavexmlRequest = ns3__SavexmlRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__Savexml(soap, &soap_tmp___ns3__Savexml);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__Savexml(soap, &soap_tmp___ns3__Savexml, "-ns3:Savexml", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__Savexml(soap, &soap_tmp___ns3__Savexml, "-ns3:Savexml", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__SavexmlResponse)
		return soap_closesock(soap);
	ns3__SavexmlResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__SavexmlResponse->soap_get(soap, "ns3:SavexmlResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::SuperfileAction(_ns3__SuperfileActionRequest *ns3__SuperfileActionRequest, _ns3__SuperfileActionResponse *ns3__SuperfileActionResponse)
{	struct soap *soap = this;
	struct __ns3__SuperfileAction soap_tmp___ns3__SuperfileAction;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/SuperfileAction?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__SuperfileAction.ns3__SuperfileActionRequest = ns3__SuperfileActionRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__SuperfileAction(soap, &soap_tmp___ns3__SuperfileAction);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__SuperfileAction(soap, &soap_tmp___ns3__SuperfileAction, "-ns3:SuperfileAction", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__SuperfileAction(soap, &soap_tmp___ns3__SuperfileAction, "-ns3:SuperfileAction", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__SuperfileActionResponse)
		return soap_closesock(soap);
	ns3__SuperfileActionResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__SuperfileActionResponse->soap_get(soap, "ns3:SuperfileActionResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int WsDfuServiceSoapProxy::SuperfileList(_ns3__SuperfileListRequest *ns3__SuperfileListRequest, _ns3__SuperfileListResponse *ns3__SuperfileListResponse)
{	struct soap *soap = this;
	struct __ns3__SuperfileList soap_tmp___ns3__SuperfileList;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://192.168.3.22:8010/WsDfu?ver_=1.36";
	soap_action = "WsDfu/SuperfileList?ver_=1.36";
	soap->encodingStyle = NULL;
	soap_tmp___ns3__SuperfileList.ns3__SuperfileListRequest = ns3__SuperfileListRequest;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns3__SuperfileList(soap, &soap_tmp___ns3__SuperfileList);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns3__SuperfileList(soap, &soap_tmp___ns3__SuperfileList, "-ns3:SuperfileList", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns3__SuperfileList(soap, &soap_tmp___ns3__SuperfileList, "-ns3:SuperfileList", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__SuperfileListResponse)
		return soap_closesock(soap);
	ns3__SuperfileListResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__SuperfileListResponse->soap_get(soap, "ns3:SuperfileListResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
